# GitHub Copilot Configuration ‚Äî Prompt Editor v2.0

# üö® IMPORTANT: ALWAYS CHECK THESE FILES FIRST BEFORE ANY TROUBLESHOOTING:
# 1. DIAGNOSTIC_CHECKLIST.md - Primary diagnostic reference and step-by-step troubleshooting
# 2. CORRECTION_SUMMARY.md - Summary of all fixes and current functionality status
# 3. PROJECT_SUMMARY.md - Overall architecture and project goals
# 4. ARCHITECTURE_ANALYSIS.md - Technical implementation details

project:
  name: "Prompt Editor v2.0"
  description: "Application Flask pour cr√©er, formater et g√©rer des prompts Markdown."
  language: "Python 3.12"
  frontend: ["HTML5", "CSS3", "Tailwind CSS", "JavaScript ES6 Modules"]
  backend: "Flask"
  database: "SQLite"
  architecture: "MVC modulaire + Architecture JavaScript modulaire"

objectives:
  - Fournir deux onglets : 
      1. Edition de prompt (√©diteur Markdown + outils + export)
      2. Gestion des templates (vue arborescente + CRUD + drag-and-drop)
  - Priorit√© √† la clart√©, la maintenabilit√© et la rapidit√© d‚Äôex√©cution (<500 ms)

agent_ai_behavior:
  role: "D√©veloppeur Python/JavaScript exp√©riment√© sp√©cialis√© en applications web Flask."
  
  # üîß WORKFLOW OBLIGATOIRE:
  # AVANT TOUTE INTERVENTION, consulter dans l'ordre :
  # 1. DIAGNOSTIC_CHECKLIST.md - Plan d'action √©tape par √©tape
  # 2. V√©rifier les logs serveur et console navigateur
  # 3. Suivre le plan de diagnostic du checklist
  
  expertise: 
    - "Architecture JavaScript modulaire ES6"
    - "Conception d'interfaces utilisateur modernes et r√©actives"
    - "Structuration de projets Flask modulaires et responsives"
    - "Debugging applications web full-stack"
    - "Tests unitaires et d'int√©gration avec pytest et Jest"
  
  critical_files:
    main_app: "app/static/js/app_v2.js"  # Orchestrateur principal (1170 lignes)
    modules: "app/static/js/{core,managers,ui,utils,config}/"
    template: "app/templates/index.html"  # Template principal (572 lignes)
    diagnostic: "DIAGNOSTIC_CHECKLIST.md"  # Guide de diagnostic complet
  approach: 
    - "Diviser le projet en modules clairs"
    - "Documenter chaque fonction et classe"
    - "√âcrire des tests pour chaque fonctionnalit√©"
    - "Optimiser les performances et la s√©curit√©"

style:
  code_standard: "PEP 8"
  comments_language: "en"
  docstrings_format: "NumPy"
  typing: true
  modular: true
  error_handling: "propre et explicite"
  logging: 
    enabled: true
    level: "DEBUG"

best_practices:
  testing: 
    framework: "pytest"
    coverage: "routes, templates, exports"
  endpoints:
    export_md: "/export/md"
    export_txt: "/export/txt"
  response_format: 
    success: "status=success"
    error: "status=error"
  deletion_confirmation: true
  ui_responsiveness: "instantaneous"
  security: "√©chappement des contenus utilisateur"

interface:
  editor:
    markdown_features: ["Gras", "Italique", "Titres", "Listes", "Citations", "Blocs de code"]
    export_formats: [".md", ".txt"]
  manager:
    features: ["Arborescence", "Cr√©ation dossier", "Suppression", "Glisser-d√©poser", "Renommage"]
  layout:
    tabs: ["√âdition", "Gestion"]
    frameworks: ["Tailwind CSS", "Bootstrap (fallback)"]

interface:_design:
  design: "moderne, √©pur√©, inspir√© des apps web 2025"
  css_framework: ["Tailwind CSS", "Bootstrap 5"]
  layout: 
    responsive: true
    elements: ["onglets", "barre d‚Äôoutils", "ic√¥nes SVG", "cartes", "ombres l√©g√®res"]
  style_guide:
    colors: "neutres"
    corners: "arrondis"
    animation: "transition douce"

tests:
  frameworks: ["pytest", "Jest"]
  coverage:
    - "Frontend integration tests (frontend_integration.test.js)"
    - "Core module tests (modules.test.js)" 
    - "End-to-end workflows (e2e.test.js)"
    - "V√©rifier cr√©ation/suppression templates"
    - "V√©rifier export Markdown et texte"
    - "V√©rifier coh√©rence entre onglets"
    - "Valider structure de base SQLite"
    - "Temps de r√©ponse < 500 ms"

# üö® DEBUGGING PROTOCOL:
debug_workflow:
  step1: "Consulter DIAGNOSTIC_CHECKLIST.md"
  step2: "V√©rifier console navigateur (F12) pour erreurs JS"
  step3: "V√©rifier logs serveur Flask"
  step4: "Tester fonctionnalit√©s selon checklist"
  step5: "Ex√©cuter tests: npm test"

common_issues:
  js_conflicts: "S'assurer que seul app_v2.js est charg√©"
  event_handlers: "V√©rifier setupCriticalDOMEvents() dans app_v2.js"
  api_issues: "V√©rifier que Flask r√©pond aux endpoints /api/"
  module_loading: "V√©rifier imports ES6 et compatibilit√© navigateur"

expected_output:
  structure:
    - app/
    - app/routes.py
    - app/models.py
    - app/templates/
    - app/static/
    - app/utils/
    - tests/
    - run.py
  goal: "Projet Flask complet, modulaire, document√© et testable"
